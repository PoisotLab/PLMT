{
  "_args": [
    [
      {
        "raw": "jandoc@0.0.2",
        "scope": null,
        "escapedName": "jandoc",
        "name": "jandoc",
        "rawSpec": "0.0.2",
        "spec": "0.0.2",
        "type": "version"
      },
      "/home/tpoisot/code/plmt/plmt"
    ]
  ],
  "_from": "jandoc@0.0.2",
  "_id": "jandoc@0.0.2",
  "_inCache": true,
  "_location": "/jandoc",
  "_npmUser": {
    "name": "jgnewman",
    "email": "rescuecreative@gmail.com"
  },
  "_npmVersion": "1.1.63",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jandoc@0.0.2",
    "scope": null,
    "escapedName": "jandoc",
    "name": "jandoc",
    "rawSpec": "0.0.2",
    "spec": "0.0.2",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/jandoc/-/jandoc-0.0.2.tgz",
  "_shasum": "8da9ef09e472cccceaf7552b47cdc6440f20363f",
  "_shrinkwrap": null,
  "_spec": "jandoc@0.0.2",
  "_where": "/home/tpoisot/code/plmt/plmt",
  "author": {
    "name": "John Newman",
    "email": "rescuecreative@gmail.com"
  },
  "bin": {
    "jandoc": "./bin/jandoc"
  },
  "bugs": {
    "url": "https://github.com/jgnewman/jandoc/issues"
  },
  "dependencies": {},
  "description": "Exposes the Pandoc API to Node.js and adds the ability to convert multiple files at once.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "8da9ef09e472cccceaf7552b47cdc6440f20363f",
    "tarball": "https://registry.npmjs.org/jandoc/-/jandoc-0.0.2.tgz"
  },
  "homepage": "https://github.com/jgnewman/jandoc#readme",
  "keywords": [
    "document",
    "converter",
    "generator",
    "batch",
    "pandoc",
    "markup",
    "markdown",
    "md",
    "rtf",
    "doc",
    "docx",
    "html",
    "haskell"
  ],
  "main": "jandoc.js",
  "maintainers": [
    {
      "name": "jgnewman",
      "email": "rescuecreative@gmail.com"
    }
  ],
  "name": "jandoc",
  "optionalDependencies": {},
  "readme": "Jandoc\n======\n\n>A wrapper for the Pandoc document conversion tool with more options.\n\n[Pandoc](https://github.com/jgm/pandoc) is a universal markup converter written\nin Haskell.  It's a great tool for converting one kind of document into another\nbut I thought it might be nice if there was a way to use it to convert multiple\ndocuments at once and expose its API through JavaScript.\n\nJandoc is written in Node.js and does just that.  The API is exposed in\ntwo different ways:\n\n1. You can call it through the command line, just like you might expect.\n2. You have an object-oriented API you can use from within a JS module.\n\nDependencies\n------------\n\n1. Pandoc\n2. Node.js\n3. Npm (package manager for Node)\n\nPandoc is written in Haskell but there are multiple installation options. Of\ncourse you'll have to install the Haskell platform.  Then, depending on your\npreferred method of installation, you may or may not want to grab the\nHaskell package manager Cabal.\n\nInstallation\n------------\n\nJandoc is an Npm package.  So, once you have the dependencies listed above\ninstalled, just do one of these: `~$ npm install jandoc`.\n\nCommand Line API\n----------------\n\nCalling Jandoc with your Unix command line is very similar to calling Pandoc with\nthe Unix command line although there are a couple of differences.\n\nFirst, Jandoc requires your input filename argument to follow a flag.  So, whereas\nPandoc would only require this...\n\n```bash\n~$ pandoc inputFile.md -o outputFile.docx\n```\n\n...Jandoc requires this:\n\n```bash\n~$ jandoc -d inputFile.md -o outputFile.docx\n```\n\nThat said, Jandoc allows you to pass in directory paths for both the `-d` (a.k.a, `--input-data`)\nand `-o` (a.k.a, `--output-location`) arguments.\n\n```bash\n~$ jandoc -d inputDir -o outputDir --write docx\n```\n\nThe above example converts all files in `inputDir` into files with corresponding names inside\n`outputDir`.  Since both arguments are directory paths, we use the `--write` argument to specify\noutput file type.  If `outputDir` doesn't exist yet, it will be created.\n\n**Note:** As of now, Jandoc does _not_ recursively delve into subfolders of your input directory\nto convert files within them.\n\nApart from these small differences, the command line API is synonymous with the Pandoc\ncommand line API.  Simply pass in other Pandoc arguments and they will be handed over to Pandoc.\n\nJavaScript API\n--------------\n\nThe JavaScript API allows you to access Jandoc functionality in two different ways.  First things\nfirst though, you'll need to import it into Node:\n\n```javascript\nvar jandoc = require('jandoc');\n```\n\nThe above code brings in a function. The first way to access Jandoc functionality is to\npass an options object to that function.  For example:\n\n```javascript\njandoc({\n  \"input\"  : \"./inputDir/\",\n  \"output\" : \"./outputDir/\",\n  \"write\"  : \"docx\"\n});\n```\n\nYour available options are equivalents of all of the Jandoc/Pandoc bash flags with the exceptions\nthat `--input-data` has become `input` and `--output-location` has become `output`.  Other than\nthat, the option keys are the long names of the bash flags in camel case rather than with dashes.\nSo if the bash flag is `--tab-stop`, the option key will be `tabStop`. If the flag does not take\nan argument in the command line, set it to `true` in the options object.\n\nOne special case is the `--variable` flag as you can pass multiple variables to the command line\nin the form of `--variable varName=value`.  In the options object, the value of your `variable`\nkey will also be an object wherein each subkey will be the variable name and the value will be its\nvalue.\n\nThe other way you can access Jandoc functionality is by calling `jandoc.cmd` and passing it\na bash argument string.  For example:\n\n```javascript\njandoc.cmd('-d inputDir -o outputDir --write docx');\n```\n\nThis will pass your Jandoc command through Node straight into the Unix interface.\n",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jgnewman/jandoc.git"
  },
  "version": "0.0.2"
}
